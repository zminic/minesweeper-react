{"version":3,"sources":["Square.tsx","Board.tsx","Game.tsx","index.tsx"],"names":["Square","props","classNames","className","push","value","isRevealed","isMine","isFlag","displayValue","mineCount","react_default","a","createElement","join","onClick","onContextMenu","e","preventDefault","Board","_this","this","squares","_loop","i","src_Square","key","level","dimension","onReveal","onFlag","length","style","Component","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","timer","getRandomNumber","max","Math","floor","random","stopTimer","clearInterval","state","levels","name","timeElapsed","objectSpread","gameState","selectedLevel","initSquares","event","find","x","currentTarget","newGame","setState","squareCount","Array","fill","index","mines","getAdjacentFields","filter","s","ind","slice","square","_this2","auto","arguments","undefined","startTimer","revealBoard","fieldsWithFlags","forEach","revealSquare","dim","len","result","isFirstColumn","isLastColumn","_this3","window","setInterval","elapsed","toFixed","_this4","levelOptions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","statusMessage","onChange","levelSelected","src_Board","flagSquare","width","ReactDOM","render","src_Game_0","document","getElementById"],"mappings":"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","file":"static/js/main.bfa0319c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square: React.FC<ISquareProps> = (props) => {\r\n\r\n  let classNames = ['square'];\r\n\r\n    if (props.className) classNames.push(props.className);\r\n\r\n    if (!props.value.isRevealed)\r\n    {\r\n        if (props.value.isFlag) classNames.push('flag');\r\n    }\r\n    else\r\n    {\r\n        classNames.push('revealed');\r\n\r\n        if (props.value.isMine) classNames.push('mine');\r\n    }\r\n\r\n    let displayValue = props.value.isRevealed && !props.value.isMine && props.value.mineCount !== 0 ? props.value.mineCount : '';\r\n\r\n    let onContextMenu = (e: React.MouseEvent) =>\r\n    {\r\n        props.onContextMenu(e);\r\n        e.preventDefault();\r\n    };\r\n\r\n  return (\r\n    <button \r\n        className={classNames.join(' ')} \r\n        onClick={props.onClick} \r\n        onContextMenu={onContextMenu}>\r\n        {displayValue}\r\n      </button>\r\n  );\r\n}\r\n\r\nexport default Square;","import React, { Component } from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends Component<IBoardProps> {\r\n  render() \r\n  {\r\n    const squares = [];\r\n\r\n    for (let i = 0; i < this.props.squares.length; i++)\r\n    {      \r\n        squares.push(<Square\r\n            key={i} \r\n            value={this.props.squares[i]} \r\n            className={i % this.props.level.dimension === 0  ? 'break' : ''}\r\n            onClick={() => this.props.onReveal(i)}\r\n            onContextMenu={() => this.props.onFlag(i)}\r\n            ></Square>);\r\n    }\r\n\r\n    return (\r\n      <div className=\"board\" style={this.props.style}>\r\n          {squares}\r\n          <div className=\"clear\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\nimport \"./Board\";\r\nimport './Game.css';\r\nimport Board from './Board';\r\n\r\nclass Game extends Component<{}, IGameState> {\r\n\r\n  private timer: number = 0;\r\n\r\n  constructor(props: {})\r\n  {\r\n    super(props);\r\n\r\n    let state = {\r\n      levels: [{\r\n        name: 'Easy',\r\n        dimension: 7,\r\n        mineCount: 5\r\n      },\r\n      {\r\n        name: 'Beginner',\r\n        dimension: 9,\r\n        mineCount: 10\r\n      },\r\n      {\r\n        name: 'Intermediate',\r\n        dimension: 12,\r\n        mineCount: 24\r\n      },\r\n      {\r\n        name: 'Advanced',\r\n        dimension: 16,\r\n        mineCount: 60\r\n      }],\r\n      timeElapsed: 0\r\n    };\r\n\r\n    this.state = {\r\n      ...state,\r\n      gameState: \"new\",\r\n      selectedLevel: state.levels[0],\r\n      squares: this.initSquares(state.levels[0])\r\n    };\r\n  }\r\n\r\n  levelSelected(event: React.ChangeEvent<HTMLSelectElement>)\r\n  {\r\n    let level = this.state.levels.find(x => x.name === event.currentTarget.value);\r\n\r\n    if (level) this.newGame(level);\r\n  }\r\n\r\n  getRandomNumber = (max: number) => Math.floor((Math.random() * 1000) + 1) % max;\r\n\r\n  newGame(level: ILevel)\r\n  {\r\n    this.stopTimer();\r\n\r\n    this.setState({\r\n      selectedLevel: level,\r\n      squares: this.initSquares(level),\r\n      gameState: \"new\",\r\n      timeElapsed: 0\r\n    });\r\n  }\r\n\r\n  initSquares(level: ILevel)\r\n  {\r\n    const squareCount = level.dimension * level.dimension;\r\n\r\n    let squares = Array(squareCount).fill(null);\r\n\r\n    for (let i = 0 ; i < squareCount; i++)\r\n      squares[i] = {\r\n        isRevealed: false,\r\n        isMine: false,\r\n        isFlag: false,\r\n        index: i,\r\n        mineCount: 0\r\n      };\r\n\r\n    // plant mines\r\n    let mines = 0;\r\n\r\n    // plant mines\r\n    while (mines < level.mineCount)\r\n    {\r\n      var index = this.getRandomNumber(squareCount);\r\n\r\n      if (!squares[index].isMine) {\r\n        squares[index].isMine = true;\r\n        mines++;\r\n      }\r\n    }\r\n\r\n    // calculate distances\r\n    for (let i = 0 ; i < squareCount; i++)\r\n    {\r\n      if (!squares[i].isMine)\r\n      {\r\n        squares[i].mineCount = this.getAdjacentFields(level, squares, i).filter(s => s.isMine).length;\r\n      }\r\n    }\r\n\r\n    return squares;\r\n  }\r\n\r\n  flagSquare(ind: number)\r\n  {\r\n    const squares = this.state.squares.slice();\r\n    const square = squares[ind];\r\n\r\n    if (!square.isRevealed)\r\n    {\r\n      square.isFlag = !square.isFlag;\r\n\r\n      this.setState({\r\n        squares: squares\r\n      });\r\n    }\r\n  }\r\n\r\n  revealSquare(ind: number, auto: boolean = false)\r\n  {\r\n    const level = this.state.selectedLevel;\r\n    const squares = this.state.squares.slice();\r\n    const square = squares[ind];\r\n\r\n    // start timer on first reveal\r\n    if (this.state.timeElapsed === 0) this.startTimer();\r\n\r\n    // skip revealed squares in auto mode\r\n    if (auto && square.isRevealed) return;\r\n\r\n    if (square.isMine)\r\n    {\r\n      this.setState({ gameState: \"lost\" });\r\n      this.stopTimer();\r\n      this.revealBoard();\r\n    }\r\n    else if (square.isRevealed && !auto)\r\n    {\r\n      let fieldsWithFlags = this.getAdjacentFields(level, squares, ind).filter(s => s.isFlag);\r\n\r\n      if (square.mineCount === fieldsWithFlags.length)\r\n      {\r\n        this.getAdjacentFields(level, squares, ind).filter(s => !s.isRevealed && !s.isFlag)\r\n          .forEach(s => this.revealSquare(s.index, true));\r\n      }\r\n    }\r\n    else\r\n    {\r\n      square.isRevealed = true;\r\n      square.isFlag = false;\r\n\r\n      if (square.mineCount === 0)\r\n        this.getAdjacentFields(level, squares, ind)\r\n          .forEach(s => this.revealSquare(s.index, true));\r\n\r\n      // check for game over\r\n      if (squares.filter(s => !s.isRevealed).length === level.mineCount)\r\n      {\r\n        this.setState({ gameState: \"won\" });\r\n        this.stopTimer();\r\n      }\r\n    }\r\n\r\n    this.setState({ squares: squares });\r\n  }\r\n\r\n  /**\r\n   * Reveal whole board, used when mine is revealed\r\n   */\r\n  revealBoard()\r\n  {\r\n    const squares = this.state.squares.slice();\r\n\r\n    for (let i = 0 ; i < squares.length; i++)\r\n      squares[i].isRevealed = true;\r\n\r\n    this.setState({ squares: squares });\r\n  }\r\n\r\n  getAdjacentFields(level: ILevel, squares: ISquare[], ind: number)\r\n  {\r\n    const dim = level.dimension;\r\n    const len = dim * dim;\r\n    let result = [];\r\n    let isFirstColumn = (i: number) => i % dim === 0 && i !== 0;\r\n    let isLastColumn = (i: number) => (i + 1) % dim === 0 && i !== len - 1;\r\n\r\n    // up\r\n    if (ind - dim >= 0)\r\n    result.push(squares[ind - dim]);\r\n\r\n    // down\r\n    if (ind + dim < len)\r\n        result.push(squares[ind + dim]);\r\n\r\n    // left\r\n    if (ind - 1 >= 0 && !isFirstColumn(ind))\r\n        result.push(squares[ind - 1]);\r\n\r\n    // right\r\n    if (ind + 1 < len && !isLastColumn(ind))\r\n        result.push(squares[ind + 1]);\r\n\r\n    // up left\r\n    if (ind - dim - 1 >= 0 && !isFirstColumn(ind - dim))\r\n        result.push(squares[ind - dim - 1]);\r\n\r\n    // up right\r\n    if (ind - dim + 1 >= 0 && !isLastColumn(ind - dim))\r\n        result.push(squares[ind - dim + 1]);\r\n\r\n    // bottom left\r\n    if (ind + dim - 1 < len && !isFirstColumn(ind + dim))\r\n        result.push(squares[ind + dim - 1]);\r\n\r\n    // bottom right\r\n    if (ind + dim + 1 < len && !isLastColumn(ind - dim))\r\n        result.push(squares[ind + dim + 1]);\r\n\r\n    return result;\r\n  }\r\n\r\n  stopTimer = () =>  clearInterval(this.timer);\r\n\r\n  startTimer()\r\n  {\r\n    this.stopTimer();\r\n\r\n    this.timer = window.setInterval(()=> { \r\n      this.setState({\r\n        timeElapsed: this.state.timeElapsed + 0.1\r\n      })\r\n     }, 100);\r\n  }\r\n\r\n  statusMessage()\r\n  {\r\n      let elapsed = this.state.timeElapsed.toFixed(1);\r\n\r\n      switch(this.state.gameState)\r\n      {\r\n        case \"new\":\r\n        case \"in-progress\":\r\n            return (<h2>Your time: {elapsed}</h2>);\r\n        case \"won\":\r\n          return (<h2>Game over! You won! ({elapsed} s)</h2>)\r\n        case \"lost\":\r\n          return (<h2>Game over! You lost! ({elapsed} s)</h2>)\r\n      }\r\n  }\r\n\r\n  render() {\r\n\r\n    const levelOptions = [];\r\n\r\n    for (var level of this.state.levels)\r\n      levelOptions.push(<option key={level.name} value={level.name}>{level.name}</option>);\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        {this.statusMessage() }\r\n        <select onChange={(e) => this.levelSelected(e)}>\r\n          {levelOptions}\r\n        </select>\r\n\r\n        <button onClick={() => this.newGame(this.state.selectedLevel)}>New game</button>\r\n\r\n        <Board \r\n          squares={this.state.squares} \r\n          level={this.state.selectedLevel} \r\n          onReveal={(ind) => this.revealSquare(ind)}\r\n          onFlag={(ind) => this.flagSquare(ind)}\r\n          style={{width: this.state.selectedLevel.dimension * 40}}\r\n          ></Board>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './Game';\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));"],"sourceRoot":""}